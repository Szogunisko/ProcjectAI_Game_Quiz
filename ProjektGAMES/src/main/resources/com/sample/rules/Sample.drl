package com.sample.rules;

import java.util.List;
import java.util.ArrayList;
import org.kie.api.runtime.KieRuntime;
import javax.swing.JOptionPane;
import javax.swing.JFrame;

import com.sample.QuestionDialog;
import com.sample.FinalGame;


global JFrame frame;
global javax.swing.JTextArea textArea;

// Definicja klasy GUIState
declare GUIState
    trescPytania: String
    opcje_odpowiedzi: List
    odpowiedz: String
end

declare Game
    title: String
end



rule "Init"
    when
    then
        String question = "What type of game are you looking for? Do you want to hone the ultimate warrior, or build a mighty nation?";
        List<String> answers = new ArrayList<>();
        answers.add("SHOOTERS");
        answers.add("RPGS");
        answers.add("STRATEGY");
        answers.add("VIRTUAL WORLDS");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end

rule "Game Type"
    when
        t: GUIState(trescPytania == "What type of game are you looking for? Do you want to hone the ultimate warrior, or build a mighty nation?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end

rule "Shooter"
	when
		t: GUIState(odpowiedz == "SHOOTERS" && trescPytania == "What type of game are you looking for? Do you want to hone the ultimate warrior, or build a mighty nation?");
	then
		String question = "Would you rather fight on the ground or while flying through space?";
        List<String> answers = new ArrayList<>();
        answers.add("Flying  through space");
        answers.add("On the ground");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "RPGS"
	when
		t: GUIState(odpowiedz == "RPGS" && trescPytania == "What type of game are you looking for? Do you want to hone the ultimate warrior, or build a mighty nation?");
	then
		String question = "What genre would you like? Swords and sorcery, starships, superheroes or something else?";
        List<String> answers = new ArrayList<>();
        answers.add("Fantasy");
        answers.add("Science Fiction");
        answers.add("Superheroes");
        answers.add("Something completely different");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "FantasyRPG"
	when
		t: GUIState(odpowiedz == "Fantasy" && trescPytania == "What genre would you like? Swords and sorcery, starships, superheroes or something else?");
	then
		String question = "Have you played World of Warcraft?";
        List<String> answers = new ArrayList<>();
        answers.add("No?! 10 million players agree: this is the place to start.");
        answers.add("Yes. Been there, done that");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;


rule "WoW"
	when
		t: GUIState(trescPytania == "Have you played World of Warcraft?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "WowNO"
	when
		t: GUIState(odpowiedz == "No?! 10 million players agree: this is the place to start." && trescPytania == "Have you played World of Warcraft?")
	then
		String game = "WORLD OF WARCRAFT";
		insert(new Game(game));
end;


rule "WoWYes"
	when
		t: GUIState(odpowiedz == "Yes. Been there, done that" && trescPytania == "Have you played World of Warcraft?");
	then
		String question = "Are you looking for a game you can casually pick up now and then, or something more involved?";
        List<String> answers = new ArrayList<>();
        answers.add("Casual");
        answers.add("Involved");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "SweetingRPG"
	when
		t: GUIState(trescPytania == "Are you looking for a game you can casually pick up now and then, or something more involved?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "CasualRPG"
	when
		t: GUIState(odpowiedz == "Casual" && trescPytania == "Are you looking for a game you can casually pick up now and then, or something more involved?");
	then
		String question = "But would you still like the option for more intense play when you have the time for it?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes");
        answers.add("No thanks");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end

rule "InvolvedRPG"
	when
		t: GUIState(odpowiedz == "Involved" && trescPytania == "Are you looking for a game you can casually pick up now and then, or something more involved?");
	then
		String question = "How many digits are in your age?";
        List<String> answers = new ArrayList<>();
        answers.add("1");
        answers.add("2");
        answers.add("More");
        answers.add("Not sure");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end

rule "Age"
	when
		t: GUIState(trescPytania == "How many digits are in your age?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Young"
	when
		t: GUIState(trescPytania == "How many digits are in your age?" && (odpowiedz == "1" || odpowiedz == "Not sure"));
	then
		String game = "WIZARD 101";
		insert(new Game(game));
end;

rule "Old"
	when
		t: GUIState(trescPytania == "How many digits are in your age?" && (odpowiedz == "2" || odpowiedz == "More"));
	then
		String question = "Do you like cute, wide eyed Anime Characters?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes");
        answers.add("No");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;	

rule "AnimeEyes"
	when
		t: GUIState(trescPytania == "Do you like cute, wide eyed Anime Characters?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "AnimeEyesNo"
	when
		t: GUIState(trescPytania == "Do you like cute, wide eyed Anime Characters?" && odpowiedz == "No");
	then
		String question = "Do you enjoy large scale battles with dozens or hundreds of players fighting each other?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes");
        answers.add("Not especially");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "RpgNotAnimeScale"
	when
		t: GUIState(trescPytania == "Do you enjoy large scale battles with dozens or hundreds of players fighting each other?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "RpgNotAnimeScaleSmall"
	when
		t: GUIState(trescPytania == "Do you enjoy large scale battles with dozens or hundreds of players fighting each other?" && odpowiedz == "Not especially");
	then
		String question = "Are you looking for a game with and emphasis on player vs player (PvP) fighting?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes");
        answers.add("No");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Pvp"
	when
		t: GUIState(trescPytania == "Are you looking for a game with and emphasis on player vs player (PvP) fighting?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "PvpYes"
	when
		t: GUIState(trescPytania == "Are you looking for a game with and emphasis on player vs player (PvP) fighting?" && odpowiedz == "Yes");
	then
		String question = "Would you like to find a game as close as possible to World of Warcraft?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes");
        answers.add("No");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "WoWLike"
	when
		t: GUIState(trescPytania == "Would you like to find a game as close as possible to World of Warcraft?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "WoWLikeYes"
	when
		t: GUIState(trescPytania == "Would you like to find a game as close as possible to World of Warcraft?" && odpowiedz == "Yes");
	then
		String game = "RUNES OF MAGIC";
        insert(new Game(game));
end;

rule "WoWLikeNo"
	when
		t: GUIState(trescPytania == "Would you like to find a game as close as possible to World of Warcraft?" && odpowiedz == "No");
	then
		String question = "Which of these distinctive features appeals to you most?";
        List<String> answers = new ArrayList<>();
        answers.add("Auto-pilot mode to grind for you");
        answers.add("The chance to become a god");
        answers.add("Hack-n-slash dungeon diving, like diablo");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;	

rule "Features"
	when
		t: GUIState(trescPytania == "Which of these distinctive features appeals to you most?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "FeaturesA-P"
	when
		t: GUIState(trescPytania == "Which of these distinctive features appeals to you most?" && odpowiedz == "Auto-pilot mode to grind for you");
	then
		String game = "CRYSTAL SAGA";
        insert(new Game(game));
end;

rule "FeaturesGOD"
	when
		t: GUIState(trescPytania == "Which of these distinctive features appeals to you most?" && odpowiedz == "The chance to become a god");
	then
		String game = "FORSAKEN WORLD";
        insert(new Game(game));
end;

rule "FeaturesHnS"
	when
		t: GUIState(trescPytania == "Which of these distinctive features appeals to you most?" && odpowiedz == "Hack-n-slash dungeon diving, like diablo");
	then
		String game = "DRAKENSANG";
        insert(new Game(game));
end;





rule "PvpNo"
	when
		t: GUIState(trescPytania == "Are you looking for a game with and emphasis on player vs player (PvP) fighting?" && odpowiedz == "No");
	then
		String question = "Are you looking for something based on the grand-daddy of RPGs, pen-and-paper Dungeons and Dragons? Or a more complex, involved combat system?";
        List<String> answers = new ArrayList<>();
        answers.add("I love D&D");
        answers.add("I want to perfect the art of crushing my enemies");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "DaD"
	when
		t: GUIState(trescPytania == "Are you looking for something based on the grand-daddy of RPGs, pen-and-paper Dungeons and Dragons? Or a more complex, involved combat system?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "DadNo"
	when
		t: GUIState(trescPytania == "Are you looking for something based on the grand-daddy of RPGs, pen-and-paper Dungeons and Dragons? Or a more complex, involved combat system?" && odpowiedz == "I want to perfect the art of crushing my enemies");
	then
		String game = "AGE OF CONAN";
        insert(new Game(game));
end;

rule "DadYes"
	when
		t: GUIState(trescPytania == "Are you looking for something based on the grand-daddy of RPGs, pen-and-paper Dungeons and Dragons? Or a more complex, involved combat system?" && odpowiedz == "I love D&D");
	then
		String question = "Do you want an old-school D&D game with low system requirements, or a cutting edge 3D D&D expierience?";
        List<String> answers = new ArrayList<>();
        answers.add("Old-school");
        answers.add("Cutting edge");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Requirements"
	when
		t: GUIState(trescPytania == "Do you want an old-school D&D game with low system requirements, or a cutting edge 3D D&D expierience?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "RequirementsOld"
	when
		t: GUIState(trescPytania == "Do you want an old-school D&D game with low system requirements, or a cutting edge 3D D&D expierience?" && odpowiedz == "Old-school");
	then
		String game = "DARK SWORDS";
        insert(new Game(game));
end;

rule "RequirementsCutting"
	when
		t: GUIState(trescPytania == "Do you want an old-school D&D game with low system requirements, or a cutting edge 3D D&D expierience?" && odpowiedz == "Cutting edge");
	then
		String game = "DUNGEONS AND DRAGONS ONLINE";
        insert(new Game(game));
end;

rule "RpgNotAnimeScaleBIG"
	when
		t: GUIState(trescPytania == "Do you enjoy large scale battles with dozens or hundreds of players fighting each other?" && odpowiedz == "Yes");
	then
		String question = "Did you like the \"Lord of the Rings\" trilogy?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes");
        answers.add("Meh");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "LoTR"
	when
		t: GUIState(trescPytania == "Did you like the \"Lord of the Rings\" trilogy?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "LoTRNO"
	when
		t: GUIState(trescPytania == "Did you like the \"Lord of the Rings\" trilogy?" && odpowiedz == "Meh");
	then
		String question = "Do you prefer a game with strong quests, or awesome pets?";
        List<String> answers = new ArrayList<>();
        answers.add("Quests");
        answers.add("Pets");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "QorP"
	when
		t: GUIState(trescPytania == "Do you prefer a game with strong quests, or awesome pets?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Quests"
	when
		t: GUIState(trescPytania == "Do you prefer a game with strong quests, or awesome pets?" && odpowiedz == "Quests");
	then
		String game = "4STORY";
        insert(new Game(game));
end;

rule "Pets"
	when
		t: GUIState(trescPytania == "Do you prefer a game with strong quests, or awesome pets?" && odpowiedz == "Pets");
	then
		String game = "AIKA";
        insert(new Game(game));
end;

rule "LoTRFan"
	when
		t: GUIState(trescPytania == "Did you like the \"Lord of the Rings\" trilogy?" && odpowiedz == "Yes");
	then
		String game = "LORD OF THE RINGS ONLINE";
        insert(new Game(game));
end;

rule "AnimeEyesYes"
	when
		t: GUIState(trescPytania == "Do you like cute, wide eyed Anime Characters?" && odpowiedz == "Yes");
	then
		String question = "Would you like to have magical servants who do the drudge work of colecting materials and crafting for you?";
        List<String> answers = new ArrayList<>();
        answers.add("Yes please!");
        answers.add("No, thanks, that's half the fun");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;


rule "Minions"
	when
		t: GUIState(trescPytania == "Would you like to have magical servants who do the drudge work of colecting materials and crafting for you?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Minions Yes"
	when
		t: GUIState(trescPytania == "Would you like to have magical servants who do the drudge work of colecting materials and crafting for you?" && odpowiedz == "Yes please!");
	then
		String game = "GRAND FANTASIA";
        insert(new Game(game));
end;

rule "Minions No"
	when
		t: GUIState(trescPytania == "Would you like to have magical servants who do the drudge work of colecting materials and crafting for you?" && odpowiedz == "No, thanks, that's half the fun");
	then
		String question = "How are you at making commitments";
        List<String> answers = new ArrayList<>();
        answers.add("Not so great - I'd like a game where I can switch my class at any time");
        answers.add("Great - I'd like a game with an emphasis on forging friendships and marriages");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Commitments"
	when
		t: GUIState(trescPytania == "How are you at making commitments" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "CommitmentsYes"
	when
		t: GUIState(trescPytania == "How are you at making commitments" && odpowiedz == "Great - I'd like a game with an emphasis on forging friendships and marriages");
	then
		String game = "DREAM OF MIRROR";
        insert(new Game(game));
end;

rule "CommitmentsNo"
	when
		t: GUIState(trescPytania == "How are you at making commitments" && odpowiedz == "Not so great - I'd like a game where I can switch my class at any time");
	then
		String game = "EDEN ETERNAL";
        insert(new Game(game));
end;

rule "SweetingRPGOcc"
	when
		t: GUIState(trescPytania == "But would you still like the option for more intense play when you have the time for it?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "SometimesSweeting"
	when
		t: GUIState(odpowiedz == "Yes" && trescPytania=="But would you still like the option for more intense play when you have the time for it?")
	then
		String game = "SHAIYA";
        insert(new Game(game));
end;

rule "NeverSweetings"
	when
		t: GUIState(odpowiedz == "No thanks" && trescPytania == "But would you still like the option for more intense play when you have the time for it?");
	then
		String question = "Would you like more social features for a group play, or a challenging game world to satisfy the solo player?";
        List<String> answers = new ArrayList<>();
        answers.add("Solo");
        answers.add("Social");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end

rule "CasualGroup"
	when
		t: GUIState(trescPytania == "Would you like more social features for a group play, or a challenging game world to satisfy the solo player?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "SoloRpgCasual"
	when
		t: GUIState(odpowiedz == "Solo" && trescPytania=="Would you like more social features for a group play, or a challenging game world to satisfy the solo player?")
	then
		String game = "ADVENTURE QUEST WORLDS";
        insert(new Game(game));
end;

rule "GroupRpgCasual"
	when
		t: GUIState(odpowiedz == "Social" && trescPytania=="Would you like more social features for a group play, or a challenging game world to satisfy the solo player?")
	then
		String game = "DRAGON FABLE";
        insert(new Game(game));
end;



rule "Science fiction"
	when
		t: GUIState(odpowiedz == "Science Fiction" && trescPytania=="What genre would you like? Swords and sorcery, starships, superheroes or something else?")
	then
		String question = "Would you like to go on ground-based missions or stick to your spaceship?";
        List<String> answers = new ArrayList<>();
        answers.add("Beam me down, Scotty");
        answers.add("I'll stick with outer space");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "MissionsPlace"
	when
		t: GUIState(trescPytania == "Would you like to go on ground-based missions or stick to your spaceship?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Scotty"
	when
		t: GUIState(odpowiedz == "Beam me down, Scotty" && trescPytania == "Would you like to go on ground-based missions or stick to your spaceship?")
	then
		String game = "STAR TREK ONLINE";
        insert(new Game(game));
end;


rule "Outer space"
	when
		t: GUIState(odpowiedz == "I'll stick with outer space" && trescPytania == "Would you like to go on ground-based missions or stick to your spaceship?")
	then
		String question = "Would you like a game that's easy to pick up, or one that takes some getting used to but is huge,epic,involed";
        List<String> answers = new ArrayList<>();
        answers.add("Easy to get the hang of");
        answers.add("The more epic, the better");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "GameScale"
	when
		t: GUIState(trescPytania == "Would you like a game that's easy to pick up, or one that takes some getting used to but is huge,epic,involed" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Easy to pick up"
	when
		t: GUIState(odpowiedz == "Easy to get the hang of" && trescPytania == "Would you like a game that's easy to pick up, or one that takes some getting used to but is huge,epic,involed")
	then
		String game = "DARK ORBIT";
        insert(new Game(game));
end
	
rule "Epic game"
	when
		t: GUIState(odpowiedz == "The more epic, the better" && trescPytania == "Would you like a game that's easy to pick up, or one that takes some getting used to but is huge,epic,involed");
	then
		String game = "EVE ONLINE";
        insert(new Game(game));
end

rule "genres"
	when
		t: GUIState(trescPytania == "What genre would you like? Swords and sorcery, starships, superheroes or something else?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;


rule "smth completely diff"
	when
		t: GUIState(odpowiedz == "Something completely different" && trescPytania == "What genre would you like? Swords and sorcery, starships, superheroes or something else?");
	then
		String question = "Is being a vampire-hunting werewolf strange enough for you?";
        List<String> answers = new ArrayList<>();
        answers.add("YES");
        answers.add("NO");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "vampires"
	when
		t: GUIState(trescPytania == "Is being a vampire-hunting werewolf strange enough for you?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "vampiresY"
	when
		t: GUIState(odpowiedz == "YES" && trescPytania == "Is being a vampire-hunting werewolf strange enough for you?");
	then
		String game = "BITEFIGHT";
        insert(new Game(game));
end;

rule "superheroes"
	when
		t: GUIState(odpowiedz == "Superheroes" && trescPytania == "What genre would you like? Swords and sorcery, starships, superheroes or something else?");
	then
		String question = "Are you old enough to remember when \"The Incredibles\" came out?";
        List<String> answers = new ArrayList<>();
        answers.add("YES");
        answers.add("NO");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "TheIncredibles"
	when
		t: GUIState(trescPytania == "Are you old enough to remember when \"The Incredibles\" came out?" && odpowiedz == null);
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "TheIncrediblesY"
	when
		t: GUIState(odpowiedz == "YES" && trescPytania == "Are you old enough to remember when \"The Incredibles\" came out?");
	then
		String game = "DC UNIVERSE ONLINE";
        insert(new Game(game));
end;


rule "TheIncrediblesN"
	when
		t: GUIState(odpowiedz == "NO" && trescPytania == "Are you old enough to remember when \"The Incredibles\" came out?");
	then
		String game = "SUPERHERO SQUAD ONLINE";
        insert(new Game(game));
end;

rule "Virtualworlds"
	when
		t: GUIState(odpowiedz == "VIRTUAL WORLDS" && trescPytania == "What type of game are you looking for? Do you want to hone the ultimate warrior, or build a mighty nation?");
	then
		String question = "Would you like a world with games built in, or would you like a completely freeform experience?";
        List<String> answers = new ArrayList<>();
        answers.add("Built in games.");
        answers.add("An open-ended world");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "WorldBuilt"
	when
		t: GUIState(trescPytania == "Would you like a world with games built in, or would you like a completely freeform experience?" && odpowiedz == null);
	then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;


rule "Strategy"
	when
		t: GUIState(odpowiedz == "STRATEGY" &&  trescPytania == "What type of game are you looking for? Do you want to hone the ultimate warrior, or build a mighty nation?");
	then
		String question = "Would you like your wars and alliances in a fantasy setting the real world, or 'the family'?";
        List<String> answers = new ArrayList<>();
        answers.add("Fantasy");
        answers.add("Historical");
        answers.add("Mafia");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Setting"
    when
        t: GUIState(trescPytania == "Would you like your wars and alliances in a fantasy setting the real world, or 'the family'?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end

rule "Mafia"
	when
		t: GUIState(odpowiedz == "Mafia" && trescPytania == "Would you like your wars and alliances in a fantasy setting the real world, or 'the family'?");
	then
		String game = "GODFATHER: FIVE FAMILIES";
        insert(new Game(game));
end;

rule "Historical"
	when
		t: GUIState(odpowiedz == "Historical" && trescPytania == "Would you like your wars and alliances in a fantasy setting the real world, or 'the family'?");
	then
		String question = "Would you like a casual game that you can put a few minutes into now and then, or a more involved game that might become an obsession?";
        List<String> answers = new ArrayList<>();
        answers.add("Involved");
        answers.add("Casual");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Fantasy"
	when
		t: GUIState(odpowiedz == "Fantasy" && trescPytania == "Would you like your wars and alliances in a fantasy setting the real world, or 'the family'?");
	then
		String question = "Would you like a game with RPG elements such as dungeon exploration, or do you want to stick with straight-up strategy?";
        List<String> answers = new ArrayList<>();
        answers.add("RPG elements");
        answers.add("Just strategy, please");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Dungeons"
	when
		t: GUIState(trescPytania == "Would you like a game with RPG elements such as dungeon exploration, or do you want to stick with straight-up strategy?" && odpowiedz == null);
	then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end;

rule "CALL OF GODS"
	when
		t: GUIState(odpowiedz == "RPG elements" && trescPytania == "Would you like a game with RPG elements such as dungeon exploration, or do you want to stick with straight-up strategy?");
	then
		String game = "CALL OF GODS";
        insert(new Game(game));
end;

rule "GREPOLIS"
	when
		t: GUIState(odpowiedz == "Just strategy, please" && trescPytania == "Would you like a game with RPG elements such as dungeon exploration, or do you want to stick with straight-up strategy?");
	then
		String game = "GREPOLIS";
        insert(new Game(game));
end;


rule "Sweeting"
	when
		t: GUIState(trescPytania == "Would you like a casual game that you can put a few minutes into now and then, or a more involved game that might become an obsession?" && odpowiedz == null);
	then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end;

rule "Involved"
	when
		t: GUIState(odpowiedz == "Involved" && trescPytania == "Would you like a casual game that you can put a few minutes into now and then, or a more involved game that might become an obsession?");
	then
		String question = "Do you want a game that can be played solo, or one that puts an emphasis on forming alliances?";
        List<String> answers = new ArrayList<>();
        answers.add("It's all me");
        answers.add("You can't conquer the world without friends");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "SoloOrFriends"
    when
        t: GUIState(trescPytania == "Do you want a game that can be played solo, or one that puts an emphasis on forming alliances?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end

rule "Solo"
	when
		t: GUIState(odpowiedz == "It's all me" && trescPytania == "Do you want a game that can be played solo, or one that puts an emphasis on forming alliances?");
	then
		String game = "CASTLE EMPIRE";
        insert(new Game(game));
end;

rule "Friends"
	when
		t: GUIState(odpowiedz == "You can't conquer the world without friends" && trescPytania == "Do you want a game that can be played solo, or one that puts an emphasis on forming alliances?");
	then
		String game = "TRAVIAN";
        insert(new Game(game));
end;

rule "Casual"
	when
		t: GUIState(odpowiedz == "Casual" && trescPytania == "Would you like a casual game that you can put a few minutes into now and then, or a more involved game that might become an obsession?");
	then
		String question = "Do you prefer higher level strategic control of a battle, or real time tactical control over your troops?";
        List<String> answers = new ArrayList<>();
        answers.add("Real time Tactics");
        answers.add("Strategic Control");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "TacticsOrStrategic"
    when
        t: GUIState(trescPytania == "Do you prefer higher level strategic control of a battle, or real time tactical control over your troops?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end

rule "Tactics"
	when
		t: GUIState(odpowiedz == "Real time Tactics" && trescPytania == "Do you prefer higher level strategic control of a battle, or real time tactical control over your troops?");
	then
		String game = "1100 AD";
        insert(new Game(game));
end;

rule "Strategic"
	when
		t: GUIState(odpowiedz == "Strategic Control" && trescPytania == "Do you prefer higher level strategic control of a battle, or real time tactical control over your troops?");
	then
		String game = "TRIBAL WARS";
        insert(new Game(game));
end;

rule "Built in"
	when
		t: GUIState(odpowiedz == "Built in games." && trescPytania == "Would you like a world with games built in, or would you like a completely freeform experience?");
	then
		String question = "Which do you prefer to build with: blocks or legos?";
        List<String> answers = new ArrayList<>();
        answers.add("Blocks");
        answers.add("Legos");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Blocks or Legos"
    when
        t: GUIState(trescPytania == "Which do you prefer to build with: blocks or legos?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end


rule "Open world"
	when
		t: GUIState(odpowiedz == "An open-ended world" && trescPytania == "Would you like a world with games built in, or would you like a completely freeform experience?");
	then
		String question = "Are you looking mostly to chat and make new friends, or do you want to create things, too?";
        List<String> answers = new ArrayList<>();
        answers.add("Chat");
        answers.add("Create");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Chat or create"
    when
        t: GUIState(trescPytania == "Are you looking mostly to chat and make new friends, or do you want to create things, too?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end


rule "Lego"
	when
		t: GUIState(odpowiedz == "Legos" && trescPytania == "Which do you prefer to build with: blocks or legos?");
	then
		String game = "ROBLOX";
        insert(new Game(game));
end;

rule "Blocks"
	when
		t: GUIState(odpowiedz == "Blocks" && trescPytania == "Which do you prefer to build with: blocks or legos?");
	then
		String game = "MINECRAFT CLASSIC";
        insert(new Game(game));
end;

rule "Imvu"
	when
		t: GUIState(odpowiedz == "Chat" && trescPytania == "Are you looking mostly to chat and make new friends, or do you want to create things, too?");
	then
		String game = "IMVU";
        insert(new Game(game));
end;

rule "2life"
	when
		t: GUIState(odpowiedz == "Create" && trescPytania == "Are you looking mostly to chat and make new friends, or do you want to create things, too?");
	then
		String game = "Second Life";
        insert(new Game(game));
end;

rule "Fight place"
    when
        t: GUIState(trescPytania == "Would you rather fight on the ground or while flying through space?" && odpowiedz == null);
    then
        QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);  
end;

rule "Flying"
	when
		t: GUIState(odpowiedz == "Flying  through space" && trescPytania == "Would you rather fight on the ground or while flying through space?");
	then
		String question = "What means more to you, enormous large scale battles, or the ability to take precise control of your ship's every move?";
        List<String> answers = new ArrayList<>();
        answers.add("Precise control");
        answers.add("Big Battles");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "Scale of battles"
	when
		t: GUIState(trescPytania == "What means more to you, enormous large scale battles, or the ability to take precise control of your ship's every move?" && odpowiedz == null)
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;


rule "PreciseControl"
	when
		t: GUIState(odpowiedz == "Precise control" && trescPytania == "What means more to you, enormous large scale battles, or the ability to take precise control of your ship's every move?")
	then
		String game = "BATTLESTAR GALACTICA";
        insert(new Game(game));
end;

rule "BigBattles"
	when
		t: GUIState(odpowiedz == "Big Battles" && trescPytania == "What means more to you, enormous large scale battles, or the ability to take precise control of your ship's every move?")
	then
		String game = "ACE ONLINE";
        insert(new Game(game));
end;

rule "Ground"
	when
		t: GUIState(odpowiedz == "On the ground" && trescPytania == "Would you rather fight on the ground or while flying through space?");
	then
		String question = "Who would you rather fight, the military or monsters?";
        List<String> answers = new ArrayList<>();
        answers.add("Monsters");
        answers.add("Military");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "MonstersOrMilitary"
	when
		t: GUIState(trescPytania == "Who would you rather fight, the military or monsters?" && odpowiedz == null)
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Military"
	when
		t: GUIState(odpowiedz == "Military" && trescPytania == "Who would you rather fight, the military or monsters?");
	then
		String question = "Do you see your self as a World War II vintage tank, or deadly cartoon soldier?";
        List<String> answers = new ArrayList<>();
        answers.add("Tank");
        answers.add("Soldier");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "TankOrSoldier"
	when
		t: GUIState(trescPytania == "Do you see your self as a World War II vintage tank, or deadly cartoon soldier?" && odpowiedz == null)
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Tank"
	when
		t: GUIState(odpowiedz == "Tank" && trescPytania == "Do you see your self as a World War II vintage tank, or deadly cartoon soldier?")
	then
		String game = "WORLD OF TANKS";
        insert(new Game(game));
end;

rule "Soldier"
	when
		t: GUIState(odpowiedz == "Soldier" && trescPytania == "Do you see your self as a World War II vintage tank, or deadly cartoon soldier?")
	then
		String game = "LOST SAGA";
        insert(new Game(game));
end;


rule "Monsters"
	when
		t: GUIState(odpowiedz == "Monsters" && trescPytania == "Who would you rather fight, the military or monsters?");
	then
		String question = "Mummies or Werewolves?";
        List<String> answers = new ArrayList<>();
        answers.add("Werewolves");
        answers.add("Mummies");
        String final_answer = null;
        insert(new GUIState(question, answers, final_answer));
end;

rule "WerewovesOrMummies"
	when
		t: GUIState(trescPytania == "Mummies or Werewolves?" && odpowiedz == null)
	then
		QuestionDialog dialog = new QuestionDialog(t.getTrescPytania(), t.getOpcje_odpowiedzi());
        String selectedAnswer = dialog.showAndWait();
        t.setOdpowiedz(selectedAnswer);
        System.out.println("Selected answer: " + selectedAnswer);
        update(t);
end;

rule "Mummies"
	when
		t: GUIState(odpowiedz == "Mummies" && trescPytania == "Mummies or Werewolves?")
	then
		String game = "MISSION AGAINST TERROR";
        insert(new Game(game));
end;

rule "Werewolves"
	when
		t: GUIState(odpowiedz == "Werewolves" && trescPytania == "Mummies or Werewolves?")
	then
		String game = "WOLF TEAM";
        insert(new Game(game));
end;


rule "END"
	when
		g: Game()
	then
		String game = g.getTitle();
        FinalGame dialog = new FinalGame(game);
end;
